var documenterSearchIndex = {"docs":
[{"location":"#MINDFulCompanion.jl","page":"Introduction","title":"MINDFulCompanion.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"MINDFulCompanion.jl is a companion package for MINDFul.jl, where some related algorithms are meant to be stored.","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [MINDFulCompanion]\nPrivate = false\nOrder   = [:function, :type]","category":"page"},{"location":"API/#MINDFulCompanion.getmultilayernodegroups-Tuple{Any}","page":"API","title":"MINDFulCompanion.getmultilayernodegroups","text":"getmultilayernodegroups(mlg) -> Vector{Vector{Int64}}\n\n\nReturn multilayer nodes in Vector{Vector{Int}} format. Used for plotting\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFulCompanion.jointrmsagenerilizeddijkstra!-Union{Tuple{R}, Tuple{MINDFul.IBN, MINDFul.IntentDAGNode{R}}} where R<:MINDFul.DomainConnectivityIntent","page":"API","title":"MINDFulCompanion.jointrmsagenerilizeddijkstra!","text":"jointrmsagenerilizeddijkstra!(\n    ibn::MINDFul.IBN,\n    idagnode::MINDFul.IntentDAGNode{R<:MINDFul.DomainConnectivityIntent};\n    optimizepaths,\n    minrate,\n    bordergroomingenabled,\n    time\n)\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFulCompanion.jointrmsagenerilizeddijkstra!-Union{Tuple{R}, Tuple{T}, Tuple{MINDFul.IBN, MINDFul.IBN, MINDFul.IntentDAGNode{T}, MINDFul.InterIntent{R}}} where {T<:MINDFul.ConnectivityIntent, R<:MINDFul.IntentDirection}","page":"API","title":"MINDFulCompanion.jointrmsagenerilizeddijkstra!","text":"jointrmsagenerilizeddijkstra!(\n    myibn::MINDFul.IBN,\n    neibn::MINDFul.IBN,\n    idagnode::MINDFul.IntentDAGNode{T<:MINDFul.ConnectivityIntent},\n    iid::MINDFul.InterIntent{R<:MINDFul.IntentDirection};\n    args...\n)\n\n\nHandles interdomain connectivity intents\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFulCompanion.mlnodegraphtomlgraph-Tuple{MINDFul.IBN, Real}","page":"API","title":"MINDFulCompanion.mlnodegraphtomlgraph","text":"mlnodegraphtomlgraph(\n    ibn::MINDFul.IBN,\n    rate::Real;\n    bordergroomingenabled\n) -> NestedGraphs.NestedGraph{Int64, AttributeGraphs.OAttributeGraph{Int64, WrappedMultiGraphs.MultiDiGraph{Int64}, Tuple{MINDFulCompanion.NodeType, Int64}, MINDFulCompanion.LinkCostVector, Missing}, AttributeGraphs.OAttributeGraph{Int64, WrappedMultiGraphs.MultiDiGraph{Int64}, Tuple{MINDFulCompanion.NodeType, Int64}, MINDFulCompanion.LinkCostVector, Missing}}\n\n\nAdd virtual links and ip cost\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFulCompanion.mlnodegraphtomlgraph-Tuple{NestedGraphs.NestedGraph}","page":"API","title":"MINDFulCompanion.mlnodegraphtomlgraph","text":"mlnodegraphtomlgraph(\n    ngr::NestedGraphs.NestedGraph\n) -> NestedGraphs.NestedGraph{Int64, AttributeGraphs.OAttributeGraph{Int64, WrappedMultiGraphs.MultiDiGraph{Int64}, Tuple{MINDFulCompanion.NodeType, Int64}, MINDFulCompanion.LinkCostVector, Missing}, AttributeGraphs.OAttributeGraph{Int64, WrappedMultiGraphs.MultiDiGraph{Int64}, Tuple{MINDFulCompanion.NodeType, Int64}, MINDFulCompanion.LinkCostVector, Missing}}\n\n\nConvert a nested graph composed by MLNodes to a multi layer nested graph. New multi layer graph loses all info about nested stuctures Return also a data structure to nodes of the new nested graph to the nodes of the old one.\n\nThere are 2 layers in the multi layer graph: PHY, IP\n\n\n\n\n\n","category":"method"},{"location":"API/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"","category":"page"}]
}
